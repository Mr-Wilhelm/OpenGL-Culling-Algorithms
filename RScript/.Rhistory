env0NoCulling <- read.csv("Env_0_NoCulling_Averages.csv") %>%   #reads the csv file
mutate(Env = "DENSE", BFC = 0, FVC = 0, ZC = 0) #adds new headings - binaries idea for culling algorithms given by Michael Scott (thankyou!)
env1NoCulling <- read.csv("Env_1_NoCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 0, ZC = 0 )
env2NoCulling <- read.csv("Env_2_NoCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 0, ZC = 0)
env0Frustum <- read.csv("Env_0_FrustumCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 0, FVC = 1, ZC = 0)
env1Frustum <- read.csv("Env_1_FrustumCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 1, ZC = 0)
env2Frustum <- read.csv("Env_2_FrustumCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 1, ZC = 0)
env0Back <- read.csv("Env_0_BackfaceCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 0, ZC = 0)
env1Back <- read.csv("Env_1_BackfaceCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 0, ZC = 0)
env2Back <- read.csv("Env_2_BackfaceCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 0, ZC = 0)
env0Z <- read.csv("Env_0_ZCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 0, FVC = 0, ZC = 1)
env1Z <- read.csv("Env_1_ZCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 0, ZC = 1)
env2Z <- read.csv("Env_2_ZCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 0, ZC = 1)
env0FrustumBack <- read.csv("Env_0_BackfaceAndFrustum_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 1, ZC = 0)
env1FrustumBack <- read.csv("Env_1_BackfaceAndFrustum_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 1, ZC = 0)
env2FrustumBack <- read.csv("Env_2_BackfaceAndFrustum_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 1, ZC = 0)
env0FrustumZ <- read.csv("Env_0_FrustumAndZ_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 0, FVC = 1, ZC = 1)
env1FrustumZ <- read.csv("Env_1_FrustumAndZ_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 1, ZC = 1)
env2FrustumZ <- read.csv("Env_2_FrustumAndZ_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 1, ZC = 1)
env0BackZ <- read.csv("Env_0_BackfaceAndZ_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 0, ZC = 1)
env1BackZ <- read.csv("Env_1_BackfaceAndZ_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 0, ZC = 1)
env2BackZ <- read.csv("Env_2_BackfaceAndZ_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 0, ZC = 1)
env0All <- read.csv("Env_0_AllCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 1, ZC = 1)
env1All <- read.csv("Env_1_AllCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 1, ZC = 1)
env2All <- read.csv("Env_2_AllCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 1, ZC = 1)
dataFrame <- rbind(env0NoCulling, env1NoCulling, env2NoCulling,
env0Frustum, env1Frustum, env2Frustum,
env0Back, env1Back, env2Back,
env0Z, env1Z, env2Z,
env0FrustumBack, env1FrustumBack, env2FrustumBack,
env0FrustumZ, env1FrustumZ, env2FrustumZ,
env0BackZ, env1BackZ, env2BackZ,
env0All, env1All, env2All)
model <- lm(avg..fps ~ avg..polys + avg..models + Env + BFC + FVC + ZC, dataFrame)
View(env2NoCulling)
source("C:/0Uni stuffs/COMP302-WA278394-2204080/RScript/RDataAnalysis.R")
library(readr)
Env_2_NoCulling_Averages <- read_csv("Env_2_NoCulling_Averages.csv")
View(Env_2_NoCulling_Averages)
env2NoCulling <- read.csv("Env_2_NoCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 0, ZC = 0)
View(env2NoCulling)
dataFrame <- rbind(env0NoCulling, env1NoCulling, env2NoCulling,
env0Frustum, env1Frustum, env2Frustum,
env0Back, env1Back, env2Back,
env0Z, env1Z, env2Z,
env0FrustumBack, env1FrustumBack, env2FrustumBack,
env0FrustumZ, env1FrustumZ, env2FrustumZ,
env0BackZ, env1BackZ, env2BackZ,
env0All, env1All, env2All)
dataFrame <- rbind(env0NoCulling, env1NoCulling, env2NoCulling,
env0Frustum, env1Frustum, env2Frustum,
env0Back, env1Back, env2Back,
env0Z, env1Z, env2Z,
env0FrustumBack, env1FrustumBack, env2FrustumBack,
env0FrustumZ, env1FrustumZ, env2FrustumZ,
env0BackZ, env1BackZ, env2BackZ,
env0All, env1All, env2All)
env2NoCulling <- read.csv("Env_2_NoCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 0, ZC = 0)
View(env2NoCulling)
View(env2FrustumZ)
View(env2FrustumBack)
View(env2Frustum)
View(env2BackZ)
View(env2Back)
View(env2All)
View(env2Z)
dataFrame <- rbind(env0NoCulling, env1NoCulling, env2NoCulling,
env0Frustum, env1Frustum, env2Frustum,
env0Back, env1Back, env2Back,
env0Z, env1Z, env2Z,
env0FrustumBack, env1FrustumBack, env2FrustumBack,
env0FrustumZ, env1FrustumZ, env2FrustumZ,
env0BackZ, env1BackZ, env2BackZ,
env0All, env1All, env2All)
View(env2NoCulling)
View(env0NoCulling)
View(env2NoCulling)
View(noCullingValues)
View(env2NoCulling)
dfTest <- rbind(env0NoCulling, env1NoCulling, env2NoCulling)
dataFrame <- rbind(env0NoCulling, env1NoCulling, env2NoCulling,
env0Frustum, env1Frustum, env2Frustum,
env0Back, env1Back, env2Back,
env0Z, env1Z, env2Z,
env0FrustumBack, env1FrustumBack, env2FrustumBack,
env0FrustumZ, env1FrustumZ, env2FrustumZ,
env0BackZ, env1BackZ, env2BackZ,
env0All, env1All, env2All)
env2NoCulling <- read.csv("Env_2_NoCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 0, ZC = 0)
dataFrame <- rbind(env0NoCulling, env1NoCulling, env2NoCulling,
env0Frustum, env1Frustum, env2Frustum,
env0Back, env1Back, env2Back,
env0Z, env1Z, env2Z,
env0FrustumBack, env1FrustumBack, env2FrustumBack,
env0FrustumZ, env1FrustumZ, env2FrustumZ,
env0BackZ, env1BackZ, env2BackZ,
env0All, env1All, env2All)
View(dataFrame)
library(readr)
Env_2_ZCulling_Averages <- read_csv("Env_2_ZCulling_Averages.csv")
View(Env_2_ZCulling_Averages)
library(readr)
Env_2_NoCulling_Averages <- read_csv("Env_2_NoCulling_Averages.csv")
View(Env_2_NoCulling_Averages)
library(readr)
Env_2_NoCulling_Averages <- read_csv("Env_2_NoCulling_Averages.csv")
View(Env_2_NoCulling_Averages)
env2NoCulling <- read.csv("Env_2_NoCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 0, ZC = 0)
dataFrame <- rbind(env0NoCulling, env1NoCulling, env2NoCulling,
env0Frustum, env1Frustum, env2Frustum,
env0Back, env1Back, env2Back,
env0Z, env1Z, env2Z,
env0FrustumBack, env1FrustumBack, env2FrustumBack,
env0FrustumZ, env1FrustumZ, env2FrustumZ,
env0BackZ, env1BackZ, env2BackZ,
env0All, env1All, env2All)
model <- lm(avg..fps ~ avg..polys + avg..models + Env + BFC + FVC + ZC, dataFrame)
View(dataFrame)
Func_ReadFiles()
Func_Hypothesis1And2()
Func_Hypothesis3()
Func_Hypothesis4()
ggplot(dataFrame,
aes(x = Env, y = avg..fps, fill = factor(BFC))) + geom_boxplot() + labs(
title = "FPS Based on back face culling",
x = "Environment",
y = "Average FPS") +
theme_minimal()
ggplot(dataFrame,
aes(x = Env, y = avg..fps, fill = factor(FVC))) + geom_boxplot() + labs(
title = "FPS Based on Frustum View Culling",
x = "Environment",
y = "Average FPS") +
theme_minimal()
defaultValues <- subset(dataFrame, BFC == 0 & FVC == 0 & ZC == 0)
View(defaultStats)
View(defaultValues)
summarise(defaultValues)
summary(defaultValues)
mean(dataFrame$avg..fps[dataFrame$BFC == 1])
mean(defaultValues$avg..fps[dataFrame$BFC == 1])
defaultValues <- subset(dataFrame, BFC == 0 & FVC == 0 & ZC == 0)
defaultBFCValues <- subset(dataFrame, BFC == 1 & FVC == 0 & ZC == 0)
defaultBFCValues <- subset(dataFrame, BFC == 1 & FVC == 0 & ZC == 0)
defaultFVCValues <- subset(dataFrame, BFC == 0 & FVC == 1 & ZC == 0)
defaultZCValues <- subset(dataFrame, BFC == 0 & FVC == 0 & ZC == 1)
View(defaultBFCValues)
defaultValues <- subset(dataFrame, BFC == 0 & FVC == 0 & ZC == 0)
View(defaultValues)
mean(defaultValues$avg..fps)
avgBaselineFPS <- mean(defaultValues$avg..fps)
avgBFCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & FVC == 0 & ZC == 0]) #get mean depending on another value
avgBFCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1, FVC == 0, ZC == 0]) #get mean depending on another value
avgBFCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 0]) #get mean depending on another value
avgBFCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 0]) #get mean depending on another value
avgBFCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 0])
avgFVCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgZCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 0 & dataFrame$ZC == 1])
avgBFCFVCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgBFCZCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 1])
avgFVCZCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 1])
avgCombinedPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 1 & dataFrame$ZC == 1])
avgFVCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
View(dataFrame)
View(dataFrame)
View(dataFrame)
dataFrame[-c(221)]
avgFVCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgFVCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
View(dataFrame)
dataFrame[-c(221),]
View(dataFrame)
avgFVCPolys <- mean(df2$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
df2 <- dataFrame[-c(221),]
View(defaultZCValues)
dataFrame <- rbind(env0NoCulling, env1NoCulling, env2NoCulling,
env0Frustum, env1Frustum, env2Frustum,
env0Back, env1Back, env2Back,
env0Z, env1Z, env2Z,
env0FrustumBack, env1FrustumBack, env2FrustumBack,
env0FrustumZ, env1FrustumZ, env2FrustumZ,
env0BackZ, env1BackZ, env2BackZ,
env0All, env1All, env2All)
df2 <- dataFrame[-221]
View(df2)
df2 <- dataFrame[-221,]
View(df2)
avgFVCPolys <- mean(df2$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
Func_GetEScore()
#Baseline FPS and Polygon Counts
avgBaselineFPS <- mean(defaultValues$avg..fps)
avgBaselinePolys <- mean(defaultValues$avg..polys)
avgBFCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 0]) #get mean depending on another value
avgFVCFPS <- mean(df2$avg..fps[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgZCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 0 & dataFrame$FVC == 0 & dataFrame$ZC == 1])
avgBFCFVCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgBFCZCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 1])
avgFVCZCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 1])
avgCombinedFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & dataFrame$FVC ==1 & dataFrame$ZC == 1])
avgBFCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 0])
avgFVCPolys <- mean(df2$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgZCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 0 & dataFrame$ZC == 1])
avgBFCFVCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgBFCZCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 1])
avgFVCZCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 1])
avgCombinedPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 1 & dataFrame$ZC == 1])
#EScore Value Calculation
NoCullingEScore <- (avgBaselineFPS / avgBaselineFPS) * 100
#EScore Value Calculation
NoCullingEScore <- ((avgBaselineFPS / avgBaselineFPS) * 100) / (avgBaselinePolys / avgBaselinePolys)) * 100
#EScore Value Calculation
NoCullingEScore <- ((avgBaselineFPS / avgBaselineFPS) * 100) / (avgBaselinePolys / avgBaselinePolys)) * 100)
#EScore Value Calculation
NoCullingEScore <- ((avgBaselineFPS / avgBaselineFPS) * 100) / (avgBaselinePolys / avgBaselinePolys) * 100)
#EScore Value Calculation
NoCullingEScore <- ((avgBaselineFPS / avgBaselineFPS) * 100) / ((avgBaselinePolys / avgBaselinePolys) * 100)
#EScore Value Calculation
NoCullingEScore <- ((avgBaselineFPS / avgBaselineFPS) * 100)
/ ((avgBaselinePolys / avgBaselinePolys) * 100)
#EScore Value Calculation
NoCullingEScore <- ((avgBaselineFPS / avgBaselineFPS) * 100) / ((avgBaselinePolys / avgBaselinePolys) * 100)
BFCEScore <- ((avgBFCFPS / avgBaselineFPS) * 100) / ((avgBFCPolys / avgBaselinePolys) * 100)
FVCEScore <- ((avgFVCFPS / avgBaselineFPS) * 100) / ((avgFVCPolys / avgBaselinePolys) * 100)
ZCEScore <- ((avgZCFPS / avgBaselineFPS) * 100) / ((avgZCPolys / avgBaselinePolys) * 100)
BFCFVCEScore <- ((avgBFCFVCFPS / avgBaselineFPS) * 100) / ((avgBFCFVCPolys / avgBaselinePolys) * 100)
BFCZCEScore <- ((avgBFCZCFPS / avgBaselineFPS) * 100) / ((avgBFCZCPolys / avgBaselinePolys) * 100)
FVCZCEScore <- ((avgFVCZCFPS / avgBaselineFPS) * 100) / ((avgFVCZCPolys / avgBaselinePolys) * 100)
CombinedEScore <- ((avgCombinedFPS / avgBaselineFPS) * 100) / ((avgCombinedPolys / avgBaselinePolys) * 100)
View(dataFrame)
model <- lm(avg..fps ~ avg..polys + avg..models + Env + BFC + FVC + ZC, dataFrame)
model <- lm(avg..fps ~ avg..polys + avg..models + Env + BFC + FVC + ZC, dataFrame)
summary(model)
model <- lm(avg..fps ~ avg..polys + avg..models + Env + BFC + FVC + ZC, dataFrame)
summary(model)
Func_Hypothesis1And2()
Func_Hypothesis3()
Func_Hypothesis4()
dataFrame <- dataFrame %>% mutate(activeAlgorithms = FVC + BFC + ZC)
ggplot(dataFrame, aes(x = factor(activeAlgorithms), y = avg..models)) +
stat_summary(fun = mean, geom = "point", size = 3) + stat_summary(fun = mean, geom = "line", group = 1) +
labs(x = "Number of active culling algorithms", y = "average rendered models", title = "Model count against number of active culling algorithms")+
theme_bw()
Func_Hypothesis1And2 <- function()
{
dataFrame <- dataFrame %>% mutate(activeAlgorithms = FVC + BFC + ZC)
ggplot(dataFrame, aes(x = factor(activeAlgorithms), y = avg..models)) +
stat_summary(fun = mean, geom = "point", size = 3) + stat_summary(fun = mean, geom = "line", group = 1) +
labs(x = "Number of active culling algorithms", y = "average rendered models", title = "Model count against number of active culling algorithms")+
theme_bw()
}
Func_Hypothesis3 <- function()
{
ggplot(dataFrame, aes(x = avg..polys, y = avg..fps, color = Env)) + geom_point() + geom_smooth(method =lm) +  theme_bw() +
labs(
title = "Polygon Count against average FPS by environment",
x = "Polygon Count",
y = "Average FPS"
)
}
Func_Hypothesis4 <- function()
{
ggplot(dataFrame,
aes(x = Env, y = avg..fps, fill = factor(BFC))) + geom_boxplot() + labs(
title = "FPS Based on back face culling",
x = "Environment",
y = "Average FPS") +
theme_minimal()
ggplot(dataFrame,
aes(x = Env, y = avg..fps, fill = factor(FVC))) + geom_boxplot() + labs(
title = "FPS Based on Frustum View Culling",
x = "Environment",
y = "Average FPS") +
theme_minimal()
ggplot(dataFrame,
aes(x = Env, y = avg..fps, fill = factor(ZC))) + geom_boxplot() + labs(
title = "FPS Based on z Culling culling",
x = "Environment",
y = "Average FPS") +
theme_minimal()
}
ggplot(dataFrame, aes(x = factor(activeAlgorithms), y = avg..models)) +
stat_summary(fun = mean, geom = "point", size = 3) + stat_summary(fun = mean, geom = "line", group = 1) +
labs(x = "Number of active culling algorithms", y = "average rendered models", title = "Model count against number of active culling algorithms")+
theme_bw()
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
Func_Hypothesis1And2()
install.packages("dplyr")
install.packages("scales")
Func_Hypothesis1And2()
dataFrame <- dataFrame %>% mutate(activeAlgorithms = FVC + BFC + ZC)
library(dplyr)
library(ggplot2)
library(scales)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("scales")
source("C:/0Uni stuffs/COMP302-WA278394-2204080/RScript/RDataAnalysis.R")
env0NoCulling <- read.csv("Env_0_NoCulling_Averages.csv") %>%   #reads the csv file
mutate(Env = "DENSE", BFC = 0, FVC = 0, ZC = 0) #adds new headings - binaries idea for culling algorithms given by Michael Scott (thankyou!)
env1NoCulling <- read.csv("Env_1_NoCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 0, ZC = 0 )
env2NoCulling <- read.csv("Env_2_NoCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 0, ZC = 0)
env0Frustum <- read.csv("Env_0_FrustumCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 0, FVC = 1, ZC = 0)
env1Frustum <- read.csv("Env_1_FrustumCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 1, ZC = 0)
env2Frustum <- read.csv("Env_2_FrustumCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 1, ZC = 0)
env0Back <- read.csv("Env_0_BackfaceCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 0, ZC = 0)
env1Back <- read.csv("Env_1_BackfaceCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 0, ZC = 0)
env2Back <- read.csv("Env_2_BackfaceCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 0, ZC = 0)
env0Z <- read.csv("Env_0_ZCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 0, FVC = 0, ZC = 1)
env1Z <- read.csv("Env_1_ZCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 0, ZC = 1)
env2Z <- read.csv("Env_2_ZCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 0, ZC = 1)
env0FrustumBack <- read.csv("Env_0_BackfaceAndFrustum_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 1, ZC = 0)
env1FrustumBack <- read.csv("Env_1_BackfaceAndFrustum_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 1, ZC = 0)
env2FrustumBack <- read.csv("Env_2_BackfaceAndFrustum_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 1, ZC = 0)
env0FrustumZ <- read.csv("Env_0_FrustumAndZ_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 0, FVC = 1, ZC = 1)
env1FrustumZ <- read.csv("Env_1_FrustumAndZ_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 1, ZC = 1)
env2FrustumZ <- read.csv("Env_2_FrustumAndZ_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 1, ZC = 1)
env0BackZ <- read.csv("Env_0_BackfaceAndZ_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 0, ZC = 1)
env1BackZ <- read.csv("Env_1_BackfaceAndZ_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 0, ZC = 1)
env2BackZ <- read.csv("Env_2_BackfaceAndZ_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 0, ZC = 1)
env0All <- read.csv("Env_0_AllCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 1, ZC = 1)
env1All <- read.csv("Env_1_AllCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 1, ZC = 1)
env2All <- read.csv("Env_2_AllCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 1, ZC = 1)
Func_ReadFiles <- function()
{
env0NoCulling <- read.csv("Env_0_NoCulling_Averages.csv") %>%   #reads the csv file
mutate(Env = "DENSE", BFC = 0, FVC = 0, ZC = 0) #adds new headings - binaries idea for culling algorithms given by Michael Scott (thankyou!)
env1NoCulling <- read.csv("Env_1_NoCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 0, ZC = 0 )
env2NoCulling <- read.csv("Env_2_NoCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 0, ZC = 0)
env0Frustum <- read.csv("Env_0_FrustumCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 0, FVC = 1, ZC = 0)
env1Frustum <- read.csv("Env_1_FrustumCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 1, ZC = 0)
env2Frustum <- read.csv("Env_2_FrustumCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 1, ZC = 0)
env0Back <- read.csv("Env_0_BackfaceCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 0, ZC = 0)
env1Back <- read.csv("Env_1_BackfaceCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 0, ZC = 0)
env2Back <- read.csv("Env_2_BackfaceCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 0, ZC = 0)
env0Z <- read.csv("Env_0_ZCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 0, FVC = 0, ZC = 1)
env1Z <- read.csv("Env_1_ZCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 0, ZC = 1)
env2Z <- read.csv("Env_2_ZCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 0, ZC = 1)
env0FrustumBack <- read.csv("Env_0_BackfaceAndFrustum_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 1, ZC = 0)
env1FrustumBack <- read.csv("Env_1_BackfaceAndFrustum_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 1, ZC = 0)
env2FrustumBack <- read.csv("Env_2_BackfaceAndFrustum_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 1, ZC = 0)
env0FrustumZ <- read.csv("Env_0_FrustumAndZ_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 0, FVC = 1, ZC = 1)
env1FrustumZ <- read.csv("Env_1_FrustumAndZ_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 0, FVC = 1, ZC = 1)
env2FrustumZ <- read.csv("Env_2_FrustumAndZ_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 0, FVC = 1, ZC = 1)
env0BackZ <- read.csv("Env_0_BackfaceAndZ_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 0, ZC = 1)
env1BackZ <- read.csv("Env_1_BackfaceAndZ_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 0, ZC = 1)
env2BackZ <- read.csv("Env_2_BackfaceAndZ_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 0, ZC = 1)
env0All <- read.csv("Env_0_AllCulling_Averages.csv") %>%
mutate(Env = "DENSE", BFC = 1, FVC = 1, ZC = 1)
env1All <- read.csv("Env_1_AllCulling_Averages.csv") %>%
mutate(Env = "SPARSE", BFC = 1, FVC = 1, ZC = 1)
env2All <- read.csv("Env_2_AllCulling_Averages.csv") %>%
mutate(Env = "DYNAMIC", BFC = 1, FVC = 1, ZC = 1)
}
dataFrame <- rbind(env0NoCulling, env1NoCulling, env2NoCulling,
env0Frustum, env1Frustum, env2Frustum,
env0Back, env1Back, env2Back,
env0Z, env1Z, env2Z,
env0FrustumBack, env1FrustumBack, env2FrustumBack,
env0FrustumZ, env1FrustumZ, env2FrustumZ,
env0BackZ, env1BackZ, env2BackZ,
env0All, env1All, env2All)
model <- lm(avg..fps ~ avg..polys + avg..models + Env + BFC + FVC + ZC, dataFrame)
summary(model)
Func_Hypothesis1And2 <- function()
{
dataFrame <- dataFrame %>% mutate(activeAlgorithms = FVC + BFC + ZC)
ggplot(dataFrame, aes(x = factor(activeAlgorithms), y = avg..models)) +
stat_summary(fun = mean, geom = "point", size = 3) + stat_summary(fun = mean, geom = "line", group = 1) +
labs(x = "Number of active culling algorithms", y = "average rendered models", title = "Model count against number of active culling algorithms")+
theme_bw()
}
Func_Hypothesis3 <- function()
{
ggplot(dataFrame, aes(x = avg..polys, y = avg..fps, color = Env)) + geom_point() + geom_smooth(method =lm) +  theme_bw() +
labs(
title = "Polygon Count against average FPS by environment",
x = "Polygon Count",
y = "Average FPS"
)
}
Func_Hypothesis4 <- function()
{
ggplot(dataFrame,
aes(x = Env, y = avg..fps, fill = factor(BFC))) + geom_boxplot() + labs(
title = "FPS Based on back face culling",
x = "Environment",
y = "Average FPS") +
theme_minimal()
ggplot(dataFrame,
aes(x = Env, y = avg..fps, fill = factor(FVC))) + geom_boxplot() + labs(
title = "FPS Based on Frustum View Culling",
x = "Environment",
y = "Average FPS") +
theme_minimal()
ggplot(dataFrame,
aes(x = Env, y = avg..fps, fill = factor(ZC))) + geom_boxplot() + labs(
title = "FPS Based on z Culling culling",
x = "Environment",
y = "Average FPS") +
theme_minimal()
}
Func_GetEScore <- function()
{
defaultValues <- subset(dataFrame, BFC == 0 & FVC == 0 & ZC == 0)
df2 <- dataFrame[-221,]
#Baseline FPS and Polygon Counts
avgBaselineFPS <- mean(defaultValues$avg..fps)
avgBaselinePolys <- mean(defaultValues$avg..polys)
#Average FPS Counts
avgBFCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 0]) #get mean depending on another value
avgFVCFPS <- mean(df2$avg..fps[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgZCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 0 & dataFrame$FVC == 0 & dataFrame$ZC == 1])
avgBFCFVCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgBFCZCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 1])
avgFVCZCFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 1])
avgCombinedFPS <- mean(dataFrame$avg..fps[dataFrame$BFC == 1 & dataFrame$FVC ==1 & dataFrame$ZC == 1])
#Average Polygon Counts
avgBFCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 0])
avgFVCPolys <- mean(df2$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgZCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 0 & dataFrame$ZC == 1])
avgBFCFVCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 1 & dataFrame$ZC == 0])
avgBFCZCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 0 & dataFrame$ZC == 1])
avgFVCZCPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 0 & dataFrame$FVC == 1 & dataFrame$ZC == 1])
avgCombinedPolys <- mean(dataFrame$avg..polys[dataFrame$BFC == 1 & dataFrame$FVC == 1 & dataFrame$ZC == 1])
#EScore Value Calculation
NoCullingEScore <- ((avgBaselineFPS / avgBaselineFPS) * 100) / ((avgBaselinePolys / avgBaselinePolys) * 100)
BFCEScore <- ((avgBFCFPS / avgBaselineFPS) * 100) / ((avgBFCPolys / avgBaselinePolys) * 100)
FVCEScore <- ((avgFVCFPS / avgBaselineFPS) * 100) / ((avgFVCPolys / avgBaselinePolys) * 100)
ZCEScore <- ((avgZCFPS / avgBaselineFPS) * 100) / ((avgZCPolys / avgBaselinePolys) * 100)
BFCFVCEScore <- ((avgBFCFVCFPS / avgBaselineFPS) * 100) / ((avgBFCFVCPolys / avgBaselinePolys) * 100)
BFCZCEScore <- ((avgBFCZCFPS / avgBaselineFPS) * 100) / ((avgBFCZCPolys / avgBaselinePolys) * 100)
FVCZCEScore <- ((avgFVCZCFPS / avgBaselineFPS) * 100) / ((avgFVCZCPolys / avgBaselinePolys) * 100)
CombinedEScore <- ((avgCombinedFPS / avgBaselineFPS) * 100) / ((avgCombinedPolys / avgBaselinePolys) * 100)
}
Func_ReadFiles()
Func_Hypothesis1And2()
Func_Hypothesis3()
Func_Hypothesis4()
Func_GetEScore()
summary(model)
